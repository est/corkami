#summary PDFのトリックに関するレジュメ　-　エンコーディング,構成,JavaScriptなど

====[http://code.google.com/p/corkami/ << back to index]====

このページは,エンコード,!JavaScript,PDFの構造を基本にしたPDFフォーマットのトリックについてのレジュメです.

注意：リンクのファイルはクリーンで,わかりやすいように私自身によって作成されたものです.しかしながら,各種のウィルスに見受けられる様々なトリックを使っているため,お使いのアンチウィルスに検出されたり,通常使用しているプログラムをクラッシュさせる可能性があります.が,Adobe Acrobat以下では機能し,それがここでの目的です.

 早い話が,これらのファイルは一風変わってますが,機能はするもので,無害です.
!JavaScriptのトリックについてさらに知りたい方はこちら： [http://bonsaiden.github.com/JavaScript-Garden/ JavaScript Garden].

直接ダウンロードするにはこちら： [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/ フォルダ SVN].

=エンコード=

全てのデータ（又は文字列）は様々な方法でエンコードすることができます.

==16進法==

文字列は16進法で格納されます.
 各文字が16進法の値でエンコードされた文字列`Hello World!`の例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex.pdf ダウンロード]):
{{{
48656c6c6f20576f726c6421
}}}

==8進法==

別の古い方法では各文字は8進法で格納されます.
 各文字がそれぞれ8進法の値によってエンコードされた文字列`Hello World!`の例
 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-octal.pdf ダウンロード]):
{{{
\110\145\154\154\157\40\127\157\162\154\144\41\
}}}

==数値間のスペース==

ここまでは何も驚くべきことはないです.が,ここで終わってはAdobeではありません.

通常16進法の値はスペースで区切りますが(`00 01 02...`),PDFではタブや改行のような空白の文字や,1つの数値における2つの数字間ですら使えます.
 数字間の空白を使って16進法でエンコードされた文字列 `Hello World!` の例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-hex-with-space.pdf ダウンロード]):
{{{
4
8
6


     5
6	c 6c 6f 		20



576f726c6421
}}}

==Asciiにおける改行==
Asciiの文字列はどんなものでも格納されますが,改行も同様に付け加えられます.
 無用の改行を使ってAsciiで格納された文字列 `Hello World!`　の例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/encode-newline.pdf ダウンロード]):
{{{
[...]
}\
\
\
\
\
\
\
H\
e\
l\
\
\
\
\
\
l\
o\
 \
[...]
}}}

=構造=
==切り取ったファイルシグネチャ==
原則としてヘッダは`%PDF-1.[4-6]`ですが,後半の数字を無視して切り取ることができます.

 ヘッダを切り取った例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-shorter.pdf ダウンロード]):
{{{
%PDF-1.
}}}

==値のないヘッダ==
値のない文字を使ったヘッダはもっと短くなります.

 値のない文字を使って切り取ったヘッダの例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/signature-null.pdf ダウンロード]):
{{{
%PDF-\0
}}}

==名前ツリー（Name Trees）==
PDFは名前ツリー（Name Trees）も含み,それぞれ構成するものは連続して実行されます.　したがって,!OpenActionのように明確なトリガなしで1つのスクリプトは複数に分割されます.　　

 名前ツリー内で2つに分割されたスクリプト!JavaScriptの例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-names.pdf ダウンロード]):
{{{
[...]
  /Names
[...]
       /Names[
            (1) <<
[...]
                  msg = "Hello";
[...]
            (2) <<
[...]
                  msg = msg + " World!";
                  app.alert(msg);
[...]
}}}

==オブジェクトなし==
Acrobat Xでは,有効なPDFはオブジェクトを必要としません.

　Acrobat X上における,トレイラーのみで作られた36バイトの有効なPDFの例　([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/emptyX.pdf ダウンロード]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>>>>>
}}}

このトリックは以前のバージョンのAcrobatでは動きません.古いバージョンでは,空であったりインデックスのないものでもオブジェクトが必要になります.

　48バイトの有効なPDFの例（Acrobat 9もしくはそれ以下） ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/empty.pdf ダウンロード]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>>>>>
}}}

==間違ったタグ==
大文字/小文字の間違いのような予想外のタグは無視されます.

　間違ったタグを使用したトレイラーの例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/structure-wrongcase.pdf ダウンロード]):
{{{
trailer
<<
/Root
    <</tYpE/caTaLOG/Pages 1 0 R>>
>>
}}}

==EOF==
PDFは増加するアップデートを管理するフォーマットなので,その情報はEOFを超えて書かれる場合もあります.

　EOFの後にオブジェクトとトレイラーが書かれたPDFの例([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-ignoredeof.pdf ダウンロード]):
{{{
[...]
%%EOF
             
% PDFを有効にするためのダミーのオブジェクト
[...]
15 0 obj
[...]
% トレイラーは他のオブジェクトの前には来てはいけない
trailer
<<
/Root<</Pages 1 0 R>>
>>

1 0 obj
<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]
[...]

2 0 obj
<<>>
stream
BT/default 20 Tf 1 0 0 1 1 715 Tm(this text and the PDF objects are stored beyond the %%EOF tag)Tj ET
[...]
}}}
==リニアライズドPDF==
最初のオブジェクトがリニアライズドタグを含まない場合,PDFは下から上へ解析します.また,最初のオブジェクトがリニアライズドタグを含む場合,それがどんな値であれ,PDFは上から下へ解析します.

　下から上,又上から下へ解析されるPDFの例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-parsingdirection.pdf ダウンロード]):
{{{
[...]
% 空のオブジェクトを挿入又は削除することで解析の方向が変わります.

12 0 obj <<<>>
[...]
31415 0 obj 
<< /Linearized -42 >>
endobj
[...]
2 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed top-down)Tj ET
endstream
endobj
[...]
20 0 obj
<<>>
stream
BT/default 35 Tf 1 0 0 1 1 715 Tm(this PDF has been parsed bottom-up)Tj ET
endstream
endobj
[...]
% このトレイラーが読み込まれると,'Top-down'が表示されます.
trailer
<<
/Root
  <<
  /Pages 1 0 R
  >>
>>
[...]
% このトレイラーが読み込まれると,'Bottom-up'が表示されます.
trailer
<<
/Root
  <<
  /Pages 10 0 R
  >>
>> 
}}}


=!JavaScriptにおけるエンコーディング=
ここでは!JavaScriptを使ったいくつかの別のエンコーディングのトリックを説明します.（Acrobatに限ったことではありません）

==連結==
最も簡単なトリックは文字列をいくつかに区切って再び連結することです.

　表示される前に再構築された`Hello World!`の例 ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-concat.pdf ダウンロード]):
{{{
[...]
      B="Hell";
      on="o ";
      jour="World!";
      app.alert(B + on + jour);
[...]
}}}

==検索と置換==
メッセージなどを隠す簡単なテクニックのひとつは,不必要な文字を追加し,使用前に削除/置換することです.　

　不必要な文字を使ってごまかした文字列`Hello World!`の例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-replace.pdf ダウンロード]):
{{{
"zHzzezzlzlzozzzzz zWozrzldz!").replace(/z/g,"")
}}}

==エスケープ==
!JavaScriptにおける別の基本的なテクニックは,同等のエンコードによって文字を置き換えることです.

　エスケープによってエンコードされた文字列`Hello World!`の例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-unescape.pdf ダウンロード]):
{{{
unescape("%48%65%6C%6C%6F%20%57%6F%72%6C%64%21")
}}}

==ｎ進法のエンコーディング==
CAFEBEBEのように,一見単語のようにも16進法の値のようにも取れる大文字の言葉は32進法で書き表せます.（32もしくはそれ以下で,使用される最後のアルファベットによります）


　それぞれの文字がそれぞれ異なる進法で数値のようにエンコードされた文字列`HELLO WORLD!`の例　([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-number.pdf ダウンロード]):
{{{
(6873049).toString(25) + " " + (38842069).toString(33) + "!"
}}}

=!JavaScriptのトリック=
==eval==
よくある方法：コードはevalで実行される文字列内で構築されます.

　実行される文字列コードの例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-eval.pdf ダウンロード]):
{{{
[...]
     eval('app.alert("Hello World!");');
[...]
}}}

==substring==
アラートのような関数は,直接にではなくても,例えばappのような親オブジェクトのsubstringとしても呼ぶことができます.

　親オブジェクトからstring referenceによって呼び出された関数!JavaScriptの例  ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-substring.pdf ダウンロード]):
{{{
[...]
     app["alert"]("Hello World!");
[...]
}}}

==配列==
上記の例を偽装された配列とその要素に拡張することができ、実際に実行される関数を更に難読化させることができます。

　偽装された配列の参照による文字列の評価例 ([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-array.pdf ダウンロード]):
{{{
[...]
     e = ("fake1")[("fake2", "eval")]
     e('app.alert("Hello World!");');
[...]
}}}

==calleeプロパティ==
 JavaScriptの関数は自身のコードにアクセスでき、様々なことに利用できます。
 従って、何らかのコードの修正に対して、正常に動作することを妨げることも可能です。
 一般的にそのような関数は自身のコードを暗号を解くための鍵として利用します。


　自身のコードを暗号を解くための鍵として使う,Decrypt関数の例([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-callee.pdf ダウンロード]):
{{{
[...]
      function decrypt(cipher) 
[...]
            key = arguments.callee.toString();
[...]
            return plaintext;
}
[...]
      app.alert(decrypt(unescape(".%10%02%0F%1BI8%01R%08%01B")));
[...]
}}}

=!JavaScript + PDF=

このトリックはPDFのコンポーネント内の情報を隠し,!JavaScript経由でその情報を取得します.


==info==
PDFのトレイラーはInfo辞書を含むことができ,エレメントの内容はInfoのオブジェクトのプロパティによって!JavaScriptで取得できます.

　トレイラーのInfo辞書のエレメントとして保管された文字列の例　([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-info.pdf ダウンロード]):
{{{
[...]
      /Info <</Author(Hello) /Title( World) /Producer( !)>>
[...]
      app.alert(info.author + info.title + info.producer);
[...]
}}}

==Annots==
同じような方法で,PDFファイルのページはコメントを入れることができ,それはそのページ上でgetAnnots関数によって取得できます.

　特有のページ上でコメントのサブジェクトのように保管された文字列の例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-annots.pdf ダウンロード]):
{{{
[...]
    /Annots
[...]
         /Subj (Hello World!)
[...]
      d = app.doc;
      d.syncAnnotScan();
      a = d.getAnnots({ nPage: 0 });
      app.alert(a[0].subject);
[...]
}}}

==Getfield==
!AcroFormのWidgetはデータや値を入れることができ,それは!GetFieldで取得できます.


　!AcroFormのWidget内に保管された文字列の例　([http://corkami.googlecode.com/svn-history/r480/trunk/misc/pdf/js-getfield.pdf ダウンロード]):
{{{
[...]
  /AcroForm
[...]
        /Subtype/Widget
        /T(mydata)        % this is the name
        /V(Hello World!)  % this is the value
[...]
      app.alert(this.getField('mydata').value);
[...]
}}}

==アンチエミュレータ==

基本の!JavaScriptでは,Adobe Acrobat特有の特徴から,実際のアプリケーションにいるのかエミュレータ内にいるのかを検出することができます


===初期値===
いくつかのAdobe特有のグローバル変数は初期値によって初期化されるので,それらをチェックすることでエミュレータをストップさせることがあります.

　アンチエミュレータとして初期値を確認するAcrobat配下の!JavaScriptのコードの例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-initvalues.pdf ダウンロード]):
{{{
[...]
      if ((app)
        && (event.target.zoomType.toString() == 'FitPage'))
[...]
}}}

===グローバル変数===
グローバル変数は他の変数に比べて違った動きを見せます.ある値を与えても,最初のタイプをキープします.

　グローバル変数を定義し,結果を比べるAcrobat配下の!JavaScriptのコードの例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/js-trick-globals.pdf ダウンロード]):
{{{
[...]
      hidden=0;  // global
      hidden_=0; // not global
      if ((hidden_ === 0) && (hidden !== 0)) 
          app.alert("nothing unusual detected.");
[...]
}}}

=最小のPDF=
以下は最も小さい有効なPDFです.でも内容は無いよう.

==ページ==
PDFがページをつけるためにはオブジェクトが必要で,親オブジェクトが子オブジェクトを定義するように,`trailer/Root/Pages`内にリファレンスされます.

　ページをつけた最小のPDFの例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/blankpage.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R>>]>>trailer<</Root<</Pages 1 0 R>>>>
}}}

==ページ + テキスト==
テキストを定義するためには,そのページは空のソースと,テキスト自身によって定義されたコンテンツが必要です.

　ページとテキストがついた最小のPDFの例（Acrobat以下）　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
trailer<</Root<</Pages 1 0 R>>>>
}}}

このオブジェクトは`endobj`タグがないことに注目してください.が,Acrobat Xでは必要になります.

　ページとテキストがついた最小のPDFの例（Acrobat X）　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld-X.pdf ダウンロード]):
{{{
%PDF-\01 0 obj<</Kids[<</Parent 1 0 R/Contents[2 0 R]>>]/Resources<<>>>>2 0 obj<<>>stream
BT/default 99 Tf 1 0 0 1 1 715 Tm(Hello World!)Tj ET
endstream
endobj
trailer<</Root<</Pages 1 0 R>>>>
}}}

==!JavaScript==
!JavaScriptを使うためには,PDFは空のPDF（「Acrobat X上における,トレイラーのみで書かれた36バイトの有効なPDFの例」参照）であることと,`trailer/root`内の!OpenAction辞書が必要となります.

　Acrobat9以下で!JavaScriptを使った最小のPDFの例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js.pdf ダウンロード]):
{{{
%PDF-\0obj<<>>trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}

　Acrobat Xでの同等の例　([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/helloworld_js_X.pdf ダウンロード]):
{{{
%PDF-\0trailer<</Root<</Pages<<>>/OpenAction<</S/JavaScript/JS(app.alert('Hello World!');)>>>>>>
}}}


=壊れたストリーム=
!FlatEncodeで圧縮されたストリームが展開中に切り取られたもしくは壊れた場合,エラーになった所まではストリームは保管されます.（通常,正常でない圧縮されたデータは無視されます.）

Acrobatがするような,展開された壊れたストリームを取得する簡単な方法は,それを添付ファイルとともにPDFテンプレートに切り取ることです.このように添付ファイルを抽出するときにストリームを展開するのはAcrobatのみです: ([http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/attachstream.py 移籍のスクリプト] + [http://corkami.googlecode.com/svn/!svn/bc/480/trunk/misc/pdf/structure-attached.pdf 添付ファイル付きのテンプレート])

=レファレンス=
 * [http://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/ Didier Stevens]
 * [http://www.symantec.com/connect/blogs/portable-document-format-malware 板橋一正]
 * [http://blog.zynamics.com/2010/07/13/recon-slides-how-to-really-obfuscate-your-pdf-malware/ Sebastian Porst]