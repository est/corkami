# check aa86.asm for explanation of the decoder
print "decoder"
print """%@"%"@,~,%,!`_^[^_^]-;>`_^[^_^]%"!,^,:`_^[^_^]-@{-`{-?:`_[^_^]_-``-``-@@`_^[^_^]-`~-``-@$`_^[^_^]-``-``-@@`_^[^_^]-`~-``-@#`_^[^_^]-+~-/~-?;`_^[^_^]%!~-;-,;`_^[^_^]-"$-@~-@``_^[^_^]-{[-);-@:`_^[^_^]-/*,%`_^[^_^]`_^[^_^]`_^[^_^]`_^[^_^]%@$-@;-?;`_^[^_^]-/~-`&,#`_^[^_^]-`~-`{,*`_^[^_^]-@@-$!`_^[^_^]-:$,[,<`_^[^_^]-!|-.),!`_^[^_^]-@{-@`-/(`_^[^_^]`_^[^_^]`_^[^_^]`_^[^_^]-{!-{.,.`_^[^_^]-~/-/``_^[^_^]%""-}@$"`_^[^_^]%@@-!/,!`_^[^_^]-:*-=%`[[[[[[[[`^^^^^-%+)@@^^^!;"""

def symbol(c):
	if c == 0:
		return "\x40"
	elif c == 0xf:
		return "\x5f"
	return chr((0x20 | c))

import sys
with open(sys.argv[1], "rb") as f:
	r = f.read()

l = len(r)
s = ""
s += symbol( ( l >> 8 ) & 0xf )
s += symbol( ( l >> 12 ) & 0xf )
s += symbol( ( l      ) & 0xf )
s += symbol( ( l >> 4 ) & 0xf )

for c in r:
	s += symbol( ord(c) & 0xf ) + symbol( ( ord(c) >> 4 ) & 0xf )
print "encoded data"
print s
