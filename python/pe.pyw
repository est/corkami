# a pefile frontend (and experimental GUI)# Ange Albertini 2012from optparse import OptionParserfrom Tkinter import *# for later# from ttk import *# tabs = Notebook(root)...# lrpane = PanedWindow...import pefileclass App:    def onselect(self, evt):        cursel = int(self.llist.curselection()[0])        if self.last_selected != cursel:            self.last_selected = cursel            self.callbacks[cursel]()    def __init__(self, master, pe):        self.pe = pe        self.last_selected = -1        root = Frame(master)        row = Frame(root)        self.llist = Listbox(row)        self.llist.insert(END, "DOS Header")        self.llist.insert(END, "NT Headers")        self.llist.insert(END, " FILE Header")        self.llist.insert(END, " OPTIONAL Header")        self.llist.pack(side=LEFT)        self.rlist = Text(row)        self.rlist.config(state=DISABLED)        self.rlist.pack(side=RIGHT)        row.pack(fill=BOTH, expand=1)        root.pack()        self.llist.bind('<<ListboxSelect>>', self.onselect)        self.callbacks = [            self.show_DOS,            self.show_NT,            self.show_FILE,            self.show_OPTIONAL,            ]    def show_hex(self, offset, size):        d = self.pe.get_data(offset, size)        self.rlist.config(state=NORMAL)        for i in range(size / 16 + 1):            lh = []            la = []            for j in range(16):                if i * 16 + j < size:                    c = d[i * 16 + j]                    lh.append("%02X"  % ord(c))                    la.append(c)                else:                    break            lh = " ".join(lh)            la = "".join(la)            if lh != "":                self.rlist.insert(END, "%s \n" % (lh))        self.rlist.config(state=DISABLED)    def show_value(self, s):        self.rlist.config(state=NORMAL)        self.rlist.delete("1.0", "end")        self.rlist.insert(END, "%03X(+%x): %s\n" % (s.__file_offset__, s.sizeof(), s.name))        for keys in s.__keys__:            for key in keys:                a = getattr(s, key)                a = "%x" % a if isinstance(a, int) or isinstance(a, long) else ""                self.rlist.insert(END, "%s: %s\n" % (key, a))        self.rlist.insert(END, "\n")        self.rlist.config(state=DISABLED)        self.show_hex(s.__file_offset__, s.sizeof())    def show_DOS(self):        self.show_value(pe.DOS_HEADER)    def show_FILE(self):        self.show_value(pe.FILE_HEADER)    def show_NT(self):        self.show_value(pe.NT_HEADERS)    def show_OPTIONAL(self):        self.show_value(pe.OPTIONAL_HEADER)if __name__ == "__main__":        parser = OptionParser()        options, args = parser.parse_args()        if args == []:                import tkFileDialog                fn = tkFileDialog.askopenfilename()                if fn != '':                        args.append(fn)        if args == []:                from sys import exit                print "Error: missing file argument"                exit();        pe = pefile.PE(args[0])        root = Tk()        root.title(args[0])        app = App(root, pe)        root.mainloop()